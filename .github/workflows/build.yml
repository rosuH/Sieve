name: Generated APK AAB (Upload - Create Artifact To Github Action)

env:
  # The name of the main module repository
  main_project_module: app
  RELEASE_VERSION: ""
  GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx3072m -Dfile.encoding=UTF-8 -XX:+HeapDumpOnOutOfMemoryError -XX:MaxMetaspaceSize=1g" -Dkotlin.daemon.jvm.options="-Xmx2560m" -Dkotlin.incremental=false
  CI_GRADLE_ARG_PROPERTIES: --stacktrace -PpreDexEnable=false --max-workers 2 --no-daemon

on:
  # on merge to master
  push:
      branches:
      - main
      paths-ignore:
        - '.idea/**'
        - '.gitattributes'
        - '.github/**.json'
        - '.gitignore'
        - '.gitmodules'
        - '**.md'
        - 'LICENSE'
        - 'NOTICE'

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Skip duplicate actions
        uses: fkirc/skip-duplicate-actions@v5
        with:
          cancel_others: true
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 17
          cache: 'gradle'
      - uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: wrapper
          gradle-home-cache-cleanup: true
#      - run: ./gradlew spotlessCheck
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Skip duplicate actions
        uses: fkirc/skip-duplicate-actions@v5
        with:
          cancel_others: true
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 17
          cache: 'gradle'
      - uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: wrapper
          gradle-home-cache-cleanup: true
      - name: Retrieve version
        run: |
          echo VERSION=$(echo ${{ github.event.head_commit.id }} | head -c 10) >> $GITHUB_ENV
      - name: Set version from properties
        run: |
          majorVersion=$(grep 'majorVersion=' gradle.properties | cut -d'=' -f2)
          minorVersion=$(grep 'minorVersion=' gradle.properties | cut -d'=' -f2)
          patchVersion=${{ github.run_number }}
          versionSuffix="${patchVersion}-$(date +'%Y%m%d%H%M')"
          versionName="${majorVersion}.${minorVersion}.${versionSuffix}"
          versionCode=$((majorVersion * 10000 + minorVersion * 100 + patchVersion))
          echo "RELEASE_VERSION_SUFFIX=$versionSuffix" >> "$GITHUB_ENV"
          echo "RELEASE_VERSION_NAME=$versionName" >> "$GITHUB_ENV"
          echo "RELEASE_VERSION_CODE=$versionCode" >> "$GITHUB_ENV"
      # Set Repository Name As Env Variable
      - name: Set repository name as env variable
        run: echo "repository_name=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV
      # Create APK Release
      - name: Build apk release project (APK) - ${{ env.main_project_module }} module
        run: ./gradlew -PappVerName=${{ env.VERSION }} ${{ env.main_project_module }}:assembleRelease -PversionCodeFromEnv=${{ env.RELEASE_VERSION_CODE }} -PversionNameFromEnv=${{ env.RELEASE_VERSION_NAME }}
      # Create Bundle AAB Release
      # Noted for main module build [main_project_module]:bundleRelease
      - name: Build app bundle release (AAB) - ${{ env.main_project_module }} module
        run: ./gradlew ${{ env.main_project_module }}:bundleRelease -PversionSuffix=${{ env.RELEASE_VERSION_SUFFIX }} -PpatchVersion=${{ github.run_number }}

      - name: Sign apk release
        if: success()
        id: sign_apk
        uses: r0adkll/sign-android-release@v1.0.4
        env:
          BUILD_TOOLS_VERSION: "34.0.0"
        with:
          releaseDirectory: app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
      - name: Sign bundle release
        if: success()
        id: sign_bundle
        uses: r0adkll/sign-android-release@v1.0.4
        env:
          BUILD_TOOLS_VERSION: "34.0.0"
        with:
          releaseDirectory: app/build/outputs/bundle/release
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
      - name: Publish release.
        id: publish_release
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          draft: false
          tag_name: ${{ env.RELEASE_VERSION_NAME }}
          generate_release_notes: true
          body: |
            ${{ github.event.head_commit.message }}

            ${{ steps.github_release.outputs.generated_changelog }}
          files: |
            app/build/outputs/apk/release/*-signed.apk
            app/build/outputs/bundle/release/*.aab
            app/build/outputs/mapping/release/mapping.txt
      - name: Fetch signed APK
        id: apk-path
        run: |
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest)
          APK_URL=$(echo "$LATEST_RELEASE" | sed -n 's/.*"browser_download_url": "\([^"]*-signed\.apk\)".*/\1/p')
          APK_NAME=$(ls app/build/outputs/apk/release/*-signed.apk)
          echo "APK_NAME=$APK_NAME" >> $GITHUB_ENV
          echo "Found APK: $APK_NAME"
      - name: List files
        run: ls -l
      - name: Send commit to telegram
        if: success()
        env:
          CHANNEL_ID: ${{ secrets.TELEGRAM_TO }}
          BOT_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          COMMIT_MESSAGE: |+
            新版本已发布 🎉
            ```
            ${{ github.event.head_commit.message }}
            ```
            [查看完整发布说明](${{ steps.publish_release.url }})
        run: |
          ESCAPED=$(python3 -c 'import json,os,urllib.parse; print(urllib.parse.quote(json.dumps(os.environ["COMMIT_MESSAGE"])))')
          curl -v "https://api.telegram.org/bot${BOT_TOKEN}/sendMediaGroup?chat_id=${CHANNEL_ID}&media=%5B%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FmarketRelease%22%2C%22parse_mode%22%3A%22MarkdownV2%22%2C%22caption%22:${ESCAPED}%7D%5D" -F marketRelease="@$APK_NAME"
#      - name: Upload Android Release to Play Store
#        uses: r0adkll/upload-google-play@v1.1.3
#        with:
#          serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT_JSON }}
#          packageName: "me.rosuh.sieve"
#          releaseFiles: 'app-release.aab'
#          track: production
#          mappingFile: 'mapping.txt'